{"version":3,"sources":["data/dinosaurs.js","components/DinosaurCard.js","components/SelectedDinosaur.js","components/Park.js","components/NewSpeciesForm.js","App.js","reportWebVitals.js","index.js"],"names":["data","dinosaurs","id","name","carnivore","weight","image","DinosaurCard","props","dinosaur","className","onClick","handleDinosaurClick","src","alt","SelectedDino","dino","foodCost","Math","ceil","food","plural","dinoEats","Park","addGoat","setState","goatCount","state","addTree","treeCount","nextDay","goatCost","treeCost","this","park","forEach","floor","list","species","find","count","push","map","Component","NewSpeciesForm","handleChange","event","target","value","handleSubmit","preventDefault","diet","newSpecies","clickHandler","onSubmit","htmlFor","type","onChange","checked","App","selectedDinosaur","addDino","addSpecies","length","addToPark","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.984cf5d9.chunk.js","sourcesContent":["const data = {\n  dinosaurs: [\n    {\n      id: 1,\n      name: \"Tyrannosaur\",\n      carnivore: true,\n      weight: 7,\n      image:\n        \"https://vignette.wikia.nocookie.net/jurassicpark/images/a/a5/Tyrannosaurus2_Render.png/revision/latest/scale-to-width-down/2000?cb=20200920201343\",\n    },\n    {\n      id: 2,\n      name: \"Spinosaur\",\n      carnivore: true,\n      weight: 7,\n      image:\n        \"http://vignette1.wikia.nocookie.net/dino/images/a/aa/SpinosaurusInfobox.png/revision/latest?cb=20150720021036\",\n    },\n    {\n      id: 3,\n      name: \"Diplodocus\",\n      carnivore: false,\n      weight: 13,\n      image:\n        \"https://s-media-cache-ak0.pinimg.com/originals/8d/15/d7/8d15d7c345a519bc6cf425cc0590d269.jpg\",\n    },\n    {\n      id: 4,\n      name: \"Triceratops\",\n      carnivore: false,\n      weight: 9,\n      image:\n        \"http://www.mojofun.eu/wp-content/uploads/2014/12/387227_Triceratops.png\",\n    },\n    {\n      id: 5,\n      name: \"Stegosaur\",\n      carnivore: false,\n      weight: 7,\n      image:\n        \"http://www.mojofun.eu/wp-content/uploads/2015/03/387228-Stegosaurus-41.png\",\n    },\n    {\n      id: 6,\n      name: \"Mosasaur\",\n      carnivore: true,\n      weight: 15,\n      image:\n        \"https://cdn.webshopapp.com/shops/12972/files/276041707/mosasaurus.png\",\n    },\n    {\n      id: 7,\n      name: \"Allosaur\",\n      carnivore: true,\n      weight: 2,\n      image:\n        \"https://vignette.wikia.nocookie.net/the-isle-dinosaur-game/images/e/ef/All0.png/revision/latest?cb=20170703103236\",\n    },\n  ],\n};\n\nexport default data;\n","const DinosaurCard = (props) => {\n  const { image, name, weight, carnivore } = props.dinosaur;\n\n  return (\n    <div\n      className=\"dinosaur-item-container\"\n      onClick={() => props.handleDinosaurClick(props.dinosaur)}\n    >\n      <img className=\"dino-image\" src={image} alt={name} />\n      <div>Name: {name}</div>\n      <div>Weight: {weight} tons</div>\n      <div>{carnivore ? \"Carnivore\" : \"Herbivore\"}</div>\n    </div>\n  );\n};\n\nexport default DinosaurCard;\n","const SelectedDino = (props) => {\n  const { image, name, weight, carnivore } = props.dino;\n  //user .ceil vs floor to round up, otherwise you'll have to + 1\n  const foodCost = Math.ceil(weight / 5) || 0;\n  //use objects to check if the math above works for each dino\n  // console.log({dino: props.dino})\n  // console.log({foodCost: foodCost}) \n  const food = carnivore ? \"goat\" : \"tree\"\n  const plural = foodCost > 1 && \"s\"\n  // Only display this section if dino is selected, so since dino evaluates to an object that starts out with empty name key, check if name even exists \n  const dinoEats = name && (<p>Eats: {foodCost} {food}{plural}</p>) \n  // ORRRR render the following (null will be as if nothing exists so nothing will happen)\n  // {name ? (<p>...</p>) : null}\n  // ORRRRRRR you can use className with a css of hidden (make sure to import app.css so that it works)\n  //className={name && \"hidden\"} \n\n  return (\n    <div className=\"selected-dino\">\n      <h3>Currently Selected Dinosaur</h3>\n      <img className=\"dino-image\" src={image} alt=\"Selected dinosaur\" />\n      <p>{name || \"No Dinosaur Selected\"}</p>\n      {dinoEats}\n    </div>\n  );\n};\n\nexport default SelectedDino;\n","import { Component } from \"react\";\n\nclass Park extends Component {\n    constructor() {\n        super()\n        this.state = {\n            treeCount: 0,\n            goatCount: 0\n        }\n    }\n\n    addGoat = () => {\n        // use + 1 for state values vs ++\n        this.setState({\n            goatCount: this.state.goatCount + 1 \n        })\n    }\n    addTree = () => {\n        // use + 1 for state values vs ++\n        this.setState({\n            treeCount: this.state.treeCount + 1 \n        })\n    }\n\n    // Set up method to \n    nextDay = (goatCost, treeCost) => {\n        this.setState({\n            goatCount: this.state.goatCount - goatCost,\n            treeCount: this.state.treeCount - treeCost\n        })\n    }\n    //ORR create a new function that calls nextDay to calculate total cost\n    // sumFunc =() => {\n    //     nextDay \n    // }\n\n    render() {\n        let goatCost = 0;\n        let treeCost = 0\n        this.props.park.forEach((dino) => {\n            dino.carnivore ? goatCost+= Math.ceil(dino.weight / 5) : treeCost += Math.floor(dino.weight / 5 + 1)\n        })\n    \n        const list = []\n        //You can also refactor this into object to get counts\n        this.props.park.forEach((dino) => {\n            const species = list.find((species) => species.name === dino.name);\n            species ? species.count++ : list.push({name: dino.name, count: 1 })\n        })\n    \n        return (\n            <div>\n                <h1>Your Park</h1>\n                {/* You can also make the below class components */}\n                <div className=\"inventory\"> \n                    <h3>Inventory</h3>\n                    <p>{this.state.treeCount}  trees, {this.state.goatCount} goats</p>\n                    <button className=\"add-tree\" onClick={this.addTree} > Add Tree </button>\n                    <button className=\"add-goat\" onClick={this.addGoat} > Add Goat </button>\n                </div>\n\n                <div className=\"cost\">\n                    <h3>Food per Day</h3>\n                    <p>{goatCost} goats, {treeCost} trees</p>\n                    {/* Call am anonymous funtion if you want to call on a function with rquired  */}\n                    <button className=\"next-day\" onClick={() => this.nextDay(goatCost, treeCost)}>Next Day</button>\n                </div>\n\n                <div className=\"dinosaurs\">\n                    <h3>Dinosaurs:</h3>\n                    <div>\n                        {list.map((species) => <p key={species.name}>{species.name}: x{species.count}</p>)}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Park","import { Component } from \"react\";\n\nclass NewSpeciesForm extends Component {\n    constructor() {\n        super()\n        this.state = {\n            name: \"\",\n            weight: \"\",\n            image: \"\",\n            diet: \"herbivore\"\n        }\n    }\n\n    // handleChangeName = (event) => {\n    //     this.setState({name: event.target.value})\n    // }\n    // handleChangeWeight = (event) => {\n    //     this.setState({weight: event.target.value})\n    // }\n    //ORRRR use bracket notation on the key for either name or weight changes\n    handleChange = (event) => {\n        this.setState({[event.target.name]: event.target.value})\n    }\n\n    handleSubmit = (event) => {\n        event.preventDefault();\n        //check if it's carnivore per addSpecies from App.js\n        const carnivore = this.state.diet === \"carnivore\"\n        //Add id to prevent missing key property per React in the addSpecies method in App.js\n        const newSpecies = {\n            name: this.state.name,\n            weight: this.state.weight,\n            image: this.state.image,\n            diet: carnivore\n        }\n        this.props.clickHandler(newSpecies);\n    }\n\n    render() {\n        return (\n            <form onSubmit={this.handleSubmit}>\n                <label htmlFor=\"name\">Name</label>\n                <input \n                    type=\"text\" \n                    id=\"name\" \n                    name=\"name\" \n                    value={this.state.name} \n                    onChange={this.handleChange}/>\n                \n                <label htmlFor=\"weight\">Weight</label>\n                <input \n                    type=\"text\" \n                    id=\"weight\" \n                    name=\"weight\" \n                    value={this.state.weight} \n                    onChange={this.handleChange}\n                />\n\n                <label htmlFor=\"image\">Image</label>\n                <input \n                    type=\"textarea\" \n                    id=\"image\" \n                    name=\"image\" \n                    value={this.state.image} \n                    onChange={this.handleChange}\n                />\n                \n                {/* if they have the same name Then what actually matters is the Value, which is not set by react.*/}\n                <label htmlFor=\"herbivore\">Herbivore</label>\n                <input \n                    type=\"radio\" \n                    id=\"herbivore\" \n                    name=\"diet\" \n                    value=\"herbivore\"\n                    onChange={this.handleChange}\n                    checked\n                    />\n                \n                <label htmlFor=\"carnivore\">Carnivore</label>\n                <input \n                    type=\"radio\" \n                    id=\"carnivore\" \n                    name=\"diet\" \n                    value=\"carnivore\"\n                    onChange={this.handleChange}/>\n                \n                {/* Don't need onClick here because it's a form listening with onSubmit */}\n                <button>Submit</button>\n            </form>\n        )\n    }\n}\n\nexport default NewSpeciesForm;","import { Component } from \"react\";\nimport \"./App.css\";\nimport data from \"./data/dinosaurs\";\nimport DinosaurCard from \"./components/DinosaurCard\";\nimport SelectedDino from \"./components/SelectedDinosaur\";\nimport Park from \"./components/Park\";\nimport NewSpeciesForm from \"./components/NewSpeciesForm\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      park: [],\n      species: data.dinosaurs,\n      selectedDinosaur: {\n        name: \"\",\n        image: \"https://via.placeholder.com/100\",\n      },\n    };\n  }\n\n  handleDinosaurClick = (dinosaur) => {\n    this.setState({\n      selectedDinosaur: dinosaur,\n    });\n  };\n\n  addDino = () => {\n    const { park, selectedDinosaur } = this.state\n    this.setState({\n      park: [...park, selectedDinosaur], \n    })\n  } \n\n  addSpecies = (newSpecies) => {\n    newSpecies.id = this.state.species.length + 1\n    this.setState({\n      species: [...this.state.species, newSpecies]\n    })\n  }\n\n  render() {\n    const { selectedDinosaur, park } = this.state;\n    // check state using object\n    // console.log({park: this.state.park})\n    const species = this.state.species.map((dinosaur) => {\n      return (\n        <DinosaurCard\n          key={dinosaur.id}\n          dinosaur={dinosaur}\n          handleDinosaurClick={this.handleDinosaurClick}\n        />\n      );\n    });\n    const addToPark = selectedDinosaur.name && (<button onClick={this.addDino}>Add to Park</button>) \n\n    return (\n      <div className=\"app\" id=\"app-container\">\n        <h1>Triassic Park</h1>\n        <SelectedDino dino={selectedDinosaur} />\n        {addToPark}\n        <div id=\"dinosaur-list-container\">{species}</div>\n        {/* REACT still renders a 0 value and NaN as truthy */}\n        {park.length > 0 && <Park park={park}/>}\n        <NewSpeciesForm clickHandler={this.addSpecies}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}